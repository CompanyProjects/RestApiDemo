<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.feel</groupId>
    <artifactId>rest-api-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <nexus.url>http://maven.cheyaoshicorp.com/nexus</nexus.url>
    </properties>

    <profiles>
        <!--development-->
        <profile>
            <id>dev</id>
            <properties>
                <env>dev</env>
                <jvmSettings.javaagent>
                    -javaagent:/data/app/pinpoint-agent-1.6.1/pinpoint-bootstrap-1.6.1.jar
                </jvmSettings.javaagent>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!--production-->
        <profile>
            <id>prd</id>
            <properties>
                <env>prd</env>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!--test-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--If you are building a web site for your business, you probably need to add some management services. Spring Boot provides several out of the box with its actuator module, such as health, audits, beans, and more-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--当我们修改了一个java类的时候，我们只需要重新编译一下，SpringBoot的就会重启了。因为devtools会监听classpath下的文件变动-->
        <!--如果你不想重新编译java类的话，还有一种方式用来让SpringBoot重启，那就是让devtools监听文件夹的变化：比如我们想让com.zkn.learnspringboot这个文件夹下的文件改变的时候，重新启动SpringBoot，那么我们只要在application.properties中添加这样一句话就行了：spring.devtools.restart.additional-paths=com\\zkn\\learnspringboot。-->
        <!--devtools可以实现页面热部署，即页面修改后会立即生效。你可以在application.properties文件中配置spring.thymeleaf.cache=false来实现这个功能-->
        <!--运行打包的应用程序时，开发人员工具会自动禁用。如果你通过 java -jar或者其他特殊的类加载器进行启动时，都会被认为是“生产环境的应用”。-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional><!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 -->
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>env/**</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources/env/${env}</directory>
                <!--<targetPath>${project.build.outputDirectory}</targetPath>-->
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources/env</directory>
                <includes>
                    <include>application.properties</include>
                    <include>application-${env}.properties</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.feel.Application</mainClass>
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <!--添加后使用 mvn spring-boot:run启动就支持热部署了，使用热部署的时候，需要IDE编译类后才能生效，你可以打开自动编译功能 -->
                <!--还可使用 spring dev tools 实现热部署,此项目使用了此种方式-->
                <!--<dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>springloaded</artifactId>
                        <version>1.2.5.RELEASE</version>
                    </dependency>
                </dependencies>-->
            </plugin>
            <!--项目开发需要发布release版本，人工管理的方式，需要手动修改version配置，修改频繁，且容易出错。现引入maven-release-plugin插件，可以提高效率，自动修改版本。-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
            </plugin>
            <!-- 生成sources源码包的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.1.2</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <snapshotRepository>
            <id>archjava</id>
            <url>${nexus.url}/content/repositories/carkey-archjava-snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>archjava</id>
            <url>${nexus.url}/content/repositories/carkey-archjava-release/</url>
        </repository>
    </distributionManagement>

    <organization>
        <name>feel.com</name>
        <url>http://www.feel.com</url>
    </organization>

</project>
